import cclib.parser as Gauparse
import cclib.progress as progress
import logging
import re
import os
import sys

###############################################
"""
Yaron, I started writing a more organized type of script, if you happen to log
when I am not arround, go read a bit about classes and try writing something that utilizes classes.
Apparently, in this early stage of the project, we won't need actual inheritance but if we need more
than one class in the future, you should be able to understand OOP with Python by then.

TODO:
1. parser method in Handlers class is what we wrote together, it reads all the non "for programmer's use"
attributes and stores then in a long list and returns it.
2. Logger method, this method should get the list from the parser method, write an organized output
file (".log" file) and dump all the attributes from the list (generated by parser method) to the file,
in the following style:

<attribute's scientific name> : <value>
e.g. -
HF : <value>

Do not use HF yet as we don't know whether cclib extracts that data from the output file or not,
if it doesn't we will have to write something that extracts it (along with other, relevant, unextracted values) 
Do note that we will need to go through the cclib scripts to figure that out so be ready to a fun session
next time we meet.

Have fun Pythonning :)
- Nadav
"""
#################################################

class Handlers(object):
    def __init__(self, filename):
        self.filename = filename
    def parser(self):
        progresser = progress.TextProgress()   #text nprogress stores logs
        filer = Gauparse.ccopen(self.filename, progresser, logging.ERROR)       
        attrs = filer.parse()	
        entries = []
    
        for attr in attrs.__dict__:
            if re.match("_(.*)", attr):
                    pass
            else:
                entries.append((attr, attrs.__dict__[attr]))
            for entry in entries:
                print str(entry)
                print '\n\n\n'
    #print attrs.__dict__.keys()
	#print attrs.__dict__['atomnos']
	#print attrs.__dict__['_attrlist']
    #for attr in attrs.__dict__:
    #    if re.match("_(.*)", attr):
    #            pass
    #    else:
    #            entries.append((attr, type(attrs.__dict__[attr]), attrs.__dict__[attr]))
    #    print [entry for entry in entries]

        
#
#
#foo = Gauarse.Gaussian("CO2_AM1_SRP_FDH.02.out", progresser)
#
#entries = []
#for attr in attrs.__dict__:
#    if re.match("_(.*)", attr):
#        pass
#    else:
#        entries.append(attrs.__dict__[attr])

#if os.path.exists(
#for entry in entries:
 

if __name__ == "__main__":
    try:
        filename = sys.argv[1]
        if os.path.exists(filename):
            if re.match("(.*).out", filename):
                handle = Handlers(filename)
                handle.parser()
            else:
                print "File is not in a valid Gaussian output file!",
                print 'Make sure the file name ends with ".out"' 
        else:
            print '"%s" does not exist! Please check that this is the correct file name' % filename
    except IndexError:
        print 'The correct syntax is "test.py <filename>"'
        sys.exit(1)
